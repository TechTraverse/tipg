"""test tipg settings classes."""

import boto3

from tipg.settings import PostgresSettings


# Test without IAM auth: should use the static, quoted password.
def test_non_iam_db_url():
    """Test non IAM DB URL"""
    settings = PostgresSettings(
        postgres_user="test_user",
        postgres_pass="test_pass",
        postgres_host="localhost",
        postgres_port=5432,
        postgres_dbname="test_db",
        iam_auth_enabled=False,
    )
    dsn = settings.database_url
    # Ensure the DSN contains the static password (properly URL-encoded)
    assert "test_pass" in dsn


# A fake RDS client to simulate token generation
class FakeRdsClient:
    """Set up mock RDS client"""

    def generate_db_auth_token(self, DBHostname, Port, DBUsername):
        """Simulate token generation"""
        return "fake-token"


# Fake boto3 client function that returns our FakeRdsClient instance
def fake_boto3_client(service_name, region_name):
    """Mock boto3 client"""
    assert service_name == "rds"
    return FakeRdsClient()


# Test with IAM auth: should use the token generated by boto3.
def test_iam_db_url(monkeypatch):
    """Test with IAM auth"""
    # Patch boto3.client to return our fake client.
    monkeypatch.setattr(boto3, "client", fake_boto3_client)

    settings = PostgresSettings(
        postgres_user="test_user",
        postgres_pass="irrelevant",  # This value should be ignored when IAM is enabled.
        postgres_host="localhost",
        postgres_port=5432,
        postgres_dbname="test_db",
        iam_auth_enabled=True,
        aws_region="us-east-1",
    )
    dsn = settings.database_url
    # Check that the fake token is present in the DSN
    assert "fake-token" in dsn
