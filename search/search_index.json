{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p> <p>Simple and Fast Geospatial OGC Features and Tiles API for PostGIS.</p> </p> <p> </p> <p>Documentation: developmentseed.org/tipg/</p> <p>Source Code: developmentseed/tipg</p> <p><code>tipg</code>, pronounced T[ee]pg, is a Python package that helps create lightweight OGC Features and Tiles API with a PostGIS Database backend. The API has been designed for OGC Features and OGC Tiles specifications.</p> <p>Note This project is the result of the merge between tifeatures and timvt.</p>"},{"location":"#install","title":"Install","text":"<pre><code>$ python -m pip install pip -U\n$ python -m pip install tipg\n\n# or from source\n$ git clone https://github.com/developmentseed/tipg.git\n$ cd tipg\n$ python -m pip install -e .\n</code></pre>"},{"location":"#ogc-specifications","title":"OGC Specifications","text":"Specification Status link OGC Common Part 1: Core \u2705 docs.ogc.org/DRAFTS/19-072.html OGC Common Part 2: Geospatial Data \u2705 docs.ogc.org/DRAFTS/20-024.html OGC Features Part 1: Core \u2705 docs.ogc.org/is/17-069r4/17-069r4.html OGC Features Part 2: CRS by Reference \u274c docs.ogc.org/is/18-058r1/18-058r1.html OGC Features Part 3: Filtering / CQL2 \u2705 docs.ogc.org/DRAFTS/19-079r1.html OGC Tiles Part 1: Core \u2705 docs.ogc.org/is/20-057/20-057.html <p>Notes:</p> <p>We chose to avoid implementing the second part of the specification to prevent the introduction of CRS-based GeoJSON. We may review this decision in the future.</p> <p>While we tried to follow OGC specifications to the letter, some API endpoints might have more capabilities (e.g., geometry column selection).</p>"},{"location":"#postgispostgresql","title":"PostGIS/PostgreSQL","text":"<p><code>tipg</code> relies greatly on PostGIS' <code>ST_*</code> functions. PostGIS must be installed on your PostgreSQL database.</p> <pre><code>SELECT name, default_version,installed_version\nFROM pg_available_extensions WHERE name LIKE 'postgis%' or name LIKE 'address%';\n</code></pre> <pre><code>CREATE EXTENSION postgis;\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>To be able to work, the application will need access to the database. <code>tipg</code> uses Starlette's configuration pattern, which makes use of environment variables or a <code>.env</code> file to pass variables to the application.</p> <p>An example of a <code>.env</code> file can be found in .env.example</p> <pre><code># you need to define the DATABASE_URL directly\nDATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n</code></pre> <p>More info about configuration options at developmentseed.org/tipg/user_guide/configuration/</p>"},{"location":"#launch","title":"Launch","text":"<pre><code>$ python -m pip install uvicorn\n\n# Set your PostGIS database instance URL in the environment\n$ export DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n$ uvicorn tipg.main:app\n\n# or using Docker\n\n$ docker-compose up app\n</code></pre>"},{"location":"#docker-images","title":"Docker images","text":"<p>We are publishing two different docker images on <code>tag</code> and on every commit to <code>main</code> branch:</p> Gunicorn main commit <code>ghcr.io/developmentseed/tipg:latest</code> tags <code>ghcr.io/developmentseed/tipg:X.X.X</code> dockerfile /dockerfiles/Dockerfile <p>See all version at github.com/developmentseed/tipg/pkgs/container/tipg</p> <pre><code>$ docker run \\\n    -p 8000:8000 \\\n    -e DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis \\\n    ghcr.io/developmentseed/tipg:latest \\\n    uvicorn tipg.main:app --host 0.0.0.0 --port 8000 --workers 1\n\n# using Gunicorn\n$ docker run \\\n    -p 8000:8000 \\\n    -e DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis \\\n    ghcr.io/developmentseed/tipg:latest \\\n    gunicorn -k uvicorn.workers.UvicornWorker tipg.main:app --bind 0.0.0.0:8000 --workers 1\n</code></pre>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/tipg/issues</p> <p>dev install</p> <pre><code>git clone https://github.com/developmentseed/tipg.git\ncd tipg\npython -m pip install -e .[\"test,dev\"]\n</code></pre> <p>You can then run the tests with the following command:</p> <pre><code>python -m pytest --cov tipg --cov-report term-missing --asyncio-mode=strict\n</code></pre> <p>and run benchmark</p> <pre><code>python -m pytest tests/benchmarks.py --benchmark-only --benchmark-columns 'min, max, mean, median' --asyncio-mode=strict\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, flake8, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code># Install pre-commit command\n$ pip install pre-commit\n\n# Setup pre-commit withing your local environment\n$ pre-commit install\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p> <p>Note: Minor version <code>0.X.0</code> update might break the API, It's recommended to pin <code>tipg</code> to minor version: <code>tipg&gt;=0.1,&lt;0.2</code></p>"},{"location":"release-notes/#unreleased","title":"unreleased","text":""},{"location":"release-notes/#101-2025-03-17","title":"1.0.1 - 2025-03-17","text":"<ul> <li>fix typo when using catalog_ttl</li> </ul>"},{"location":"release-notes/#100-2025-03-07","title":"1.0.0 - 2025-03-07","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>add <code>tilesets</code> and <code>viewer</code> links in <code>/collections</code> and <code>/collections/{collectionId}</code> response links</li> <li>add the ability to use a schema other than pg_temp for installing catalog functions (using <code>TIPG_DB_APPLICATION_SCHEMA</code> environment variable)</li> <li>re-use pg connection for <code>features_count</code> and <code>features</code></li> <li>add <code>tipg.collections.Collection</code> abstract base class</li> </ul>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>rename <code>tipg.collections.Collection -&gt; tipg.collections.PgCollection</code> breaking change</li> <li>update <code>Collection.get_tile()</code> and <code>Collection.features()</code> signature to expect <code>request: Request</code> as first parameter breaking change</li> <li>rename <code>tipg.collections.get_collection_index</code> to <code>tipg.collections.pg_get_collection_index</code> and change the function to use <code>DatabaseSettings</code> instance directly instead of keyword option breaking change</li> <li>update <code>tipg.collections.pg_get_collection_index</code> to return a list of PgCollection instead of a Catalog breaking change</li> <li>update <code>tipg.collections.register_collection_catalog</code> to pass <code>db_settings</code> to <code>pg_get_collection_index</code> function breaking change</li> <li>remove deprecated tiles endpoint with default TileMatrixSet</li> <li>rename tilejson endpoint from <code>/collections/{collectionId}/{tileMatrixSetId}/tilejson.json</code> to <code>/collections/{collectionId}/tiles/{tileMatrixSetId}/tilejson.json</code> breaking change</li> <li>rename stylejson endpoint from <code>/collections/{collectionId}/{tileMatrixSetId}/style.json</code> to <code>/collections/{collectionId}/tiles/{tileMatrixSetId}/style.json</code> breaking change</li> <li> <p>change <code>database.connect_to_db</code> input order breaking change</p> <pre><code># Before\nasync def connect_to_db(\n    app: FastAPI,\n    settings: Optional[PostgresSettings] = None,\n    schemas: Optional[List[str]] = None,\n    user_sql_files: Optional[List[pathlib.Path]] = None,\n    **kwargs,\n) -&gt; None:\n\n# Now\nasync def connect_to_db(\n    app: FastAPI,\n    *,\n    schemas: List[str],\n    tipg_schema: str = \"pg_temp\",\n    user_sql_files: Optional[List[pathlib.Path]] = None,\n    settings: Optional[PostgresSettings] = None,\n    **kwargs,\n) -&gt; None:\n</code></pre> </li> </ul>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>fix URL in HTML templates when behind proxy</li> </ul>"},{"location":"release-notes/#0101-2025-03-04","title":"0.10.1 - 2025-03-04","text":"<ul> <li>remove <code>PostgresSettings</code> initialization from main.py</li> </ul>"},{"location":"release-notes/#0100-2025-02-20","title":"0.10.0 - 2025-02-20","text":"<ul> <li>convert tile bbox into collection's CRS for <code>MVT</code> where selection (author @callsumzg, developmentseed/tipg!205)</li> </ul>"},{"location":"release-notes/#090-2025-01-17","title":"0.9.0 - 2025-01-17","text":"<ul> <li> <p>fix serialization of UUID columns (author @giorgiobasile, developmentseed/tipg!199)</p> </li> <li> <p>Unify Docker images (deprecate <code>tipg-uvicorn</code>)</p> </li> <li> <p>Remove <code>python3.8</code> support</p> </li> <li> <p>Add <code>python3.13</code> support</p> </li> </ul>"},{"location":"release-notes/#080-2024-10-17","title":"0.8.0 - 2024-10-17","text":"<ul> <li>update <code>starlette-cramjam</code> dependency and set compression-level default to 6</li> <li>update <code>morecantile</code> dependency requirement to allow <code>6.x</code></li> </ul>"},{"location":"release-notes/#073-2024-09-16","title":"0.7.3 - 2024-09-16","text":"<ul> <li>add <code>TIPG_SORT_COLUMNS</code> settings to enable/disable columns sorting (default to <code>True</code>) (author @mattdiez-at, developmentseed/tipg!187)</li> <li>fix <code>protomaps-leaflet</code> version in HTML template (co-author @bmcandr, developmentseed/tipg!190)</li> </ul>"},{"location":"release-notes/#072-2024-08-27","title":"0.7.2 - 2024-08-27","text":"<ul> <li>move back to <code>fastapi</code> dependency</li> </ul>"},{"location":"release-notes/#071-2024-05-07","title":"0.7.1 - 2024-05-07","text":"<ul> <li>move to <code>fastapi-slim</code> to avoid unwanted dependencies</li> </ul>"},{"location":"release-notes/#070-2024-04-01","title":"0.7.0 - 2024-04-01","text":"<ul> <li>update leaflet version</li> <li>add <code>templated=True</code> in template URL links</li> <li>add <code>(Template URL)</code> in template URL links title</li> <li>remove deserialization in <code>tipg.factory.create_html_response</code> function</li> <li>add <code>title</code> option to <code>create_html_response</code> method, in order to set the web page title</li> <li>add <code>**kwargs</code> to <code>create_html_response</code> method to allow custom object to be passed to the template</li> <li>fix url/path passed to the HTML template</li> <li>fix HTML templates when passing Query Parameters</li> <li>replace <code>maplibre</code> with <code>leaflet+protomaps-leaflet</code> to support other TMS in the HTML <code>viewer</code></li> <li>deprecate non-tilematrixset prefixed endpoints for tiles/tilejson/stylejson/viewer to better match with the OGC Spec breaking</li> <li>re-order endpoints</li> <li>remove Z limit to support negative values</li> </ul>"},{"location":"release-notes/#063-2024-02-02","title":"0.6.3 - 2024-02-02","text":"<ul> <li>update pydantic's <code>Field</code> usage to avoid 3.0 deprecation</li> <li>update starlette's `TemplateResponse' usage to avoid deprecation</li> </ul>"},{"location":"release-notes/#062-2024-01-19","title":"0.6.2 - 2024-01-19","text":"<ul> <li>add <code>root_path</code> API settings</li> <li>fix invalid <code>url</code> parsing in HTML responses</li> </ul>"},{"location":"release-notes/#061-2024-01-11","title":"0.6.1 - 2024-01-11","text":"<ul> <li>use <code>spatial_extent</code> and <code>datetime_extent</code> configuration options in <code>CatalogUpdateMiddleware</code> and <code>/refresh</code> endpoint (author @hrodmn, developmentseed/tipg!164)</li> </ul>"},{"location":"release-notes/#060-2024-01-09","title":"0.6.0 - 2024-01-09","text":"<ul> <li>update FastAPI version lower limit to <code>&gt;0.107.0</code> and adapt for new starlette version</li> <li>fix invalid streaming response formatting</li> <li>refactor internal table properties handling</li> <li>fix sub-model Table settings (developmentseed/tipg#154)</li> </ul>"},{"location":"release-notes/#058-2024-01-10","title":"0.5.8 - 2024-01-10","text":"<ul> <li>fix invalid streaming response formatting [backported from 0.6.0]</li> </ul>"},{"location":"release-notes/#057-2024-01-08","title":"0.5.7 - 2024-01-08","text":"<ul> <li>add <code>tags</code> to all routes</li> <li>fix <code>collections</code> and <code>items</code> HTML templates to keep query-parameters when changing the <code>page size</code></li> <li>update FastAPI version upper limit to <code>&lt;0.107.0</code> to avoid starlette breaking change (0.28)</li> </ul>"},{"location":"release-notes/#056-2023-12-19","title":"0.5.6 - 2023-12-19","text":"<ul> <li>Fix collections <code>prev</code> links and collections html templates</li> </ul>"},{"location":"release-notes/#055-2023-12-19","title":"0.5.5 - 2023-12-19","text":"<ul> <li>Fix <code>prev</code> offset value</li> </ul>"},{"location":"release-notes/#054-2023-12-19","title":"0.5.4 - 2023-12-19","text":"<ul> <li>Fix decimal error for streaming responses (author @RemcoMeeuwissen, developmentseed/tipg!148)</li> </ul>"},{"location":"release-notes/#053-2023-11-29","title":"0.5.3 - 2023-11-29","text":"<ul> <li>add Postgres <code>date</code> type as valid datetime column type</li> </ul>"},{"location":"release-notes/#052-2023-11-28","title":"0.5.2 - 2023-11-28","text":"<ul> <li>add <code>TIPG_DB_SPATIAL_EXTENT</code> and <code>TIPG_DB_DATETIME_EXTENT</code> environment options to control if <code>tipg</code> will scan the tables for spatio-temporal extents (author @hrodmn, developmentseed/tipg!143)</li> </ul>"},{"location":"release-notes/#051-2023-11-15","title":"0.5.1 - 2023-11-15","text":""},{"location":"release-notes/#fixed_1","title":"fixed","text":"<ul> <li>fix for using <code>is null</code> in CQL2 filter (developmentseed/tipg!140)</li> </ul>"},{"location":"release-notes/#050-2023-11-02","title":"0.5.0 - 2023-11-02","text":""},{"location":"release-notes/#added_1","title":"added","text":"<ul> <li> <p>add <code>py.typed</code> file</p> </li> <li> <p>add <code>tipg.collections.ItemList</code> and <code>tipg.collections.CollectionList</code> TypedDict</p> <pre><code>class ItemList(TypedDict):\n    \"\"\"Items.\"\"\"\n\n    items: List[Feature]\n    matched: Optional[int]\n    next: Optional[int]\n    prev: Optional[int]\n\nclass CollectionList(TypedDict):\n    \"\"\"Collections.\"\"\"\n\n    collections: List[Collection]\n    matched: Optional[int]\n    next: Optional[int]\n    prev: Optional[int]\n</code></pre> </li> </ul>"},{"location":"release-notes/#fixed_2","title":"fixed","text":"<ul> <li> <p>hide map element in HTML pages when collections/items do not have spatial component (developmentseed/tipg#132)</p> </li> <li> <p>exclude/include tables and functions (developmentseed/tipg#130)</p> </li> </ul>"},{"location":"release-notes/#changed_1","title":"changed","text":"<ul> <li> <p>split endpoints registration for more customization</p> <pre><code># before\nclass OGCFeaturesFactory(EndpointsFactory):\n\n    def register_routes(self):\n        @self.router.get(\"/collections\", ...)\n        @self.router.get(\"/collections/{collectionId}\", ...)\n        ...\n\n# now\nclass OGCFeaturesFactory(EndpointsFactory):\n\n    def register_routes(self):\n        self._collections_route()\n        self._collection_route()\n        self._queryables_route()\n        self._items_route()\n        self._item_route()\n\n    def _collections_route(self):\n        @self.router.get(\"/collections\", ...)\n\n    ...\n</code></pre> </li> <li> <p><code>Collection.features()</code> method now returns an <code>ItemList</code> dict</p> <p><pre><code>#before\ncollection = Collection()\nfeatures_collection, matched = collection.features(...)\n\n#now\ncollection = Collection()\nitems_list = collection.features(...)\nprint(items_list[\"matched\"])  # Number of matched items for the query\nprint(items_list[\"next\"])  # Next Offset\nprint(items_list[\"prev\"])  # Previous Offset\n</code></pre> - rename <code>catalog_dependency</code> attribute to <code>collections_dependency</code></p> </li> <li> <p>move the <code>collections_dependency</code> attribute from the <code>EndpointsFactory</code> to <code>OGCFeaturesFactory</code> class</p> </li> <li> <p>move <code>/collections</code> QueryParameters in the <code>CollectionsParams</code> dependency</p> </li> <li> <p>rename <code>CatalogParams</code> to <code>CollectionsParams</code></p> </li> <li> <p>the <code>CollectionsParams</code> now returns a <code>CollectionList</code> object</p> </li> <li> <p>move <code>s_intersects</code> and <code>t_intersects</code> functions from <code>tipg.factory</code> to <code>tipg.dependencies</code></p> </li> </ul>"},{"location":"release-notes/#044-2023-10-03","title":"0.4.4 - 2023-10-03","text":""},{"location":"release-notes/#fixed_3","title":"fixed","text":"<ul> <li>replace <code>string_to_table(...)</code> by <code>unnest(string_to_array(...))</code> to support Postgres&lt;14</li> </ul>"},{"location":"release-notes/#changed_2","title":"changed","text":"<ul> <li>update pydantic minimum version to &gt;=2.4</li> </ul>"},{"location":"release-notes/#043-2023-08-28","title":"0.4.3 - 2023-08-28","text":""},{"location":"release-notes/#fixed_4","title":"fixed","text":"<ul> <li>forward <code>catalog_dependency</code> in <code>OGCFeaturesFactory</code> and <code>OGCTilesFactory</code> when using <code>Endpoints</code> factory</li> <li>allow Factory's prefix with path parameter</li> <li>changed <code>database_url</code> type in <code>PostgresSettings</code> to always be of <code>pydantic.PostgresDsn</code> type</li> <li><code>postgres_port</code> type in <code>PostgresSettings</code> to be of <code>integer</code> type</li> <li>remove additional <code>/</code> prefix for dbname when constructing the database url from individual parameters</li> </ul>"},{"location":"release-notes/#changed_3","title":"changed","text":"<ul> <li>changed <code>function_parameters_query</code> and <code>properties_filter_query</code> from dependencies to simple callabe</li> </ul>"},{"location":"release-notes/#042-2023-08-24","title":"0.4.2 - 2023-08-24","text":""},{"location":"release-notes/#changed_4","title":"changed","text":"<ul> <li>replace stamen basemap by OSM in tiles viewer</li> </ul>"},{"location":"release-notes/#fixed_5","title":"fixed","text":"<ul> <li><code>limit</code> option is <code>less than or equal to</code> to the <code>MAX_FEATURES_PER_QUERY</code> configuration (instead of <code>less than</code>)</li> </ul>"},{"location":"release-notes/#041-2023-08-04","title":"0.4.1 - 2023-08-04","text":""},{"location":"release-notes/#fixed_6","title":"Fixed","text":"<ul> <li>set <code>custom_sql_directory</code> in <code>CustomSQLSettings</code> to <code>None</code> to ensure it can be properly optional</li> </ul>"},{"location":"release-notes/#040-2023-08-01","title":"0.4.0 - 2023-08-01","text":""},{"location":"release-notes/#changed_5","title":"Changed","text":"<ul> <li>update requirement to switch to pydantic~=2.0</li> <li>morecantile&gt;=5.0,&lt;6.0</li> <li>pydantic~=2.0</li> <li>pydantic-settings~=2.0</li> <li>geojson-pydantic&gt;=1.0,&lt;2.0</li> <li> <p>fastapi&gt;=0.100</p> </li> <li> <p>move <code>ResponseType</code>, <code>QueryablesResponseType</code>, <code>ItemsResponseType</code>, <code>ItemResponseType</code>, <code>VectorResponseType</code>, <code>VectorType</code> and <code>FilterLang</code> from <code>tipg.enums</code> to <code>tipg.dependencies</code> and use <code>Literal</code> instead of <code>Enum</code></p> </li> <li> <p>add <code>func</code> attribute to <code>CatalogUpdateMiddleware</code> to allow custom Catalog Update function</p> <pre><code># Before\napp.add_middleware(\n    CatalogUpdateMiddleware,\n    ttl=300,\n)\n\n# Now\napp.add_middleware(\n    CatalogUpdateMiddleware,\n    func=register_collection_catalog,\n    ttl=300,\n)\n</code></pre> </li> <li> <p>add global variables for conformance classes</p> </li> </ul>"},{"location":"release-notes/#fixed_7","title":"Fixed","text":"<ul> <li>remove usage of pydantic models in <code>/items</code> and <code>/items/{itemId}</code> endpoints to increase performance</li> </ul>"},{"location":"release-notes/#031-2023-07-28","title":"0.3.1 - 2023-07-28","text":""},{"location":"release-notes/#fixed_8","title":"Fixed","text":"<ul> <li>fixed wrong media type option for <code>/queryables</code> endpoint (<code>json</code> instead of `schemajson``)</li> </ul>"},{"location":"release-notes/#added_2","title":"Added","text":"<ul> <li>more endpoints in performance benchmarks</li> </ul>"},{"location":"release-notes/#030-2023-07-27","title":"0.3.0 - 2023-07-27","text":""},{"location":"release-notes/#fixed_9","title":"Fixed","text":"<ul> <li>added <code>python-dotenv</code> dependency via <code>pydantic[dotenv]</code></li> <li><code>type</code> query parameter to filter collections based on their type (<code>Function</code> or <code>Table</code>)</li> <li>fixed a small bug in the <code>tipg_properties</code> SQL function where the bounds property was not properly transformed to 4326 (author @RemcoMeeuwissen, developmentseed/tipg!87)</li> <li>handling functions that are interpreted as collections but lack parameters (author @jackharrhy, developmentseed/tipg!96)</li> <li>fixed a bug where Numeric/Decimal postgres datatype could not get serialized by orjson. They will now be encoded as string (author @RemcoMeeuwissen, developmentseed/tipg!89)</li> </ul>"},{"location":"release-notes/#added_3","title":"Added","text":"<ul> <li>added popups to leaflet maps on <code>items</code> and <code>item</code> page. (author @krishnaglodha &amp; @jackharrhy, developmentseed/tipg!91, developmentseed/tipg!94)</li> <li><code>catalog_dependency</code> to retrieve the list of collections (defaults to <code>tipg.dependencies.CatalogParams</code>)</li> </ul>"},{"location":"release-notes/#changed_6","title":"Changed","text":"<ul> <li>pin <code>geojson-pydantic</code> to <code>&gt;=0.4.3,&lt;1.0</code> to avoid geojson-pydantic breaking changes</li> <li>pin <code>pydantic</code> to <code>~=1.0</code></li> </ul>"},{"location":"release-notes/#020-2023-06-22","title":"0.2.0 - 2023-06-22","text":""},{"location":"release-notes/#changed_7","title":"Changed","text":"<ul> <li>rename <code>tipg.db</code> -&gt; <code>tipg.database</code></li> <li>rename <code>tipg.dbmodel</code> -&gt; <code>tipg.collections</code></li> <li>rename <code>tipg.dbmodel.Database</code> -&gt; <code>tipg.collections.Catalog</code></li> <li>move <code>register_collection_catalog</code> from <code>tipg.dbmodel</code> to <code>tipg.collections</code></li> </ul> <pre><code># before\nfrom tipg.db import close_db_connection, connect_to_db\nfrom tipg.db import register_collection_catalog\nfrom tipg.dbmodel import Database, Collection\n\n# now\nfrom tipg.collections import Catalog, Collection\nfrom tipg.collections import register_collection_catalog\nfrom tipg.database import close_db_connection, connect_to_db\n</code></pre>"},{"location":"release-notes/#removed","title":"Removed","text":"<ul> <li>remove useless <code>app.state.db_settings</code></li> </ul>"},{"location":"release-notes/#010-2023-06-15","title":"0.1.0 - 2023-06-15","text":"<ul> <li>Initial release</li> </ul>"},{"location":"advanced/customization/","title":"Customization","text":"<p><code>Tipg</code> is designed to be fully customizable, in respect to the OGC standard. This page aims to show some example of customizations.</p>"},{"location":"advanced/customization/#application","title":"Application","text":"<p>While <code>Tipg</code> provides a default application <code>tipg.main:app</code>, users can easily create their own FastAPI application and register the OGC API endpoints using the endpoint factories provided by <code>Tipg</code>.</p> <pre><code>from contextlib import asynccontextmanager\nfrom tipg.database import close_db_connection, connect_to_db\nfrom tipg.collections import register_collection_catalog\nfrom tipg.errors import DEFAULT_STATUS_CODES, add_exception_handlers\nfrom tipg.factory import OGCFeaturesFactory\nfrom tipg.settings import PostgresSettings, DatabaseSettings\n\nfrom fastapi import FastAPI\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"FastAPI Lifespan\n\n    - Create DB connection POOL and `register` the custom tipg SQL function within `pg_temp`\n    - Create the collection_catalog\n    - Close the connection pool when closing the application\n\n    \"\"\"\n    await connect_to_db(\n        app,\n        schemas=[\"public\"],\n        tipg_schema=\"pg_temp\",\n        settings=PostgresSettings(database_url=\"postgres://....\"),\n    )\n    await register_collection_catalog(\n        app,\n        db_settings=DatabaseSettings(schemas=[\"public\"], application_schema=\"pg_temp\"),\n    )\n\n    yield\n\n    await close_db_connection(app)\n\n\napp = FastAPI(openapi_url=\"/api\", docs_url=\"/api.html\", lifespan=lifespan)\n\nendpoints = OGCFeaturesFactory(with_common=True)\napp.include_router(endpoints.router)\n\nadd_exception_handlers(app, DEFAULT_STATUS_CODES)\n</code></pre>"},{"location":"advanced/customization/#html-templates","title":"HTML Templates","text":"<p>The default <code>HTML</code> responses are generated using Jinja HTML templates.</p> <p>You can override part or a complete list of templates and then provide <code>TIPG_TEMPLATE_DIRECTORY</code> environment to tell the <code>tipg</code> application to first look in the provided directory for HTML templates.</p> <p>When building custom <code>tipg</code> application you can set the <code>templates</code> attribute of the <code>Endpoints</code> Factory.</p> <pre><code>from fastapi import FastAPI\nimport jinja2\n\nfrom tipg.factory import Endpoints\n\napp = FastAPI(openapi_url=\"/api\", docs_url=\"/api.html\")\n\ntemplates_location = (\n    [\n        jinja2.FileSystemLoader(\"{PATH TO YOUR CUSTOM TEMPLATE DIRECTORY}\"),\n        jinja2.PackageLoader(\"tipg\", \"templates\"),  # Fallback to default's tipg templates\n    ]\n)\n\njinja2_env = jinja2.Environment(loader=jinja2.ChoiceLoader(templates_location))\ntemplates = Jinja2Templates(env=jinja2_env)\n\nogc_api = Endpoints(templates=templates)\napp.include_router(ogc_api.router)\n</code></pre> <p>Example:</p> <p>In <code>eoAPI</code>, we use a custom logo by overriding the <code>header.html</code> : github.com/developmentseed/eoAPI/blob/8a3b3de4e82499994fec022229ac3be70bbc1388/runtime/eoapi/vector/eoapi/vector/templates/header.html</p> <p></p>"},{"location":"advanced/customization/#sql-functions","title":"SQL Functions","text":"<p><code>tipg</code> support SQL functional layers (see Functions).</p> <p><code>Functions</code> will be either found by <code>tipg</code> at startup within the specified schemas or by registering them dynamically to the <code>pg_temp</code> schema when creating the Database connection.</p> <p>To <code>register</code> custom SQL functions, user can set <code>TIPG_CUSTOM_SQL_DIRECTORY</code> environment variable when using <code>tipg</code> demo application or set <code>user_sql_files</code> option in tipg.db.connect_to_db.</p> <pre><code>from tipg.database import connect_to_db\nfrom tipg.collections import register_collection_catalog\nfrom tipg.settings import PostgresSettings, DatabaseSettings\n\npostgres_settings = PostgresSettings()\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def startup_event() -&gt; None:\n    \"\"\"Connect to database on startup.\"\"\"\n    await connect_to_db(\n        app,\n        settings=postgres_settings,\n        schemas=[\"public\"],\n        user_sql_files=\"tests/fixtures/functions\",  # &lt;----\n    )\n    await register_collection_catalog(\n        app,\n        db_settings=DatabaseSettings(\n            schemas=[\"public\"],\n            exclude_function_schemas=[\"public\"],\n        ),\n    )\n</code></pre> <pre><code>TIPG_DB_EXCLUDE_FUNCTION_SCHEMAS='[\"public\"]' TIPG_CUSTOM_SQL_DIRECTORY=tests/fixtures/functions  uvicorn tipg.main:app --port 8000 --reload\n</code></pre> <pre><code>curl -s http://127.0.0.1:8000/collections\\?f\\=json | jq -r '.collections[].id' | grep \"pg_temp\"\npg_temp.landsat_centroids\npg_temp.hexagons_g\npg_temp.hexagons\npg_temp.squares\npg_temp.landsat\n</code></pre>"},{"location":"advanced/customization/#custom-schema-for-tipg-catalog-method","title":"Custom schema for <code>tipg</code> catalog method","text":"<p>By default, when users start the <code>tipg</code> application, we will register some SQL function to the <code>pg_temp</code> schema. This schema might not always be available to the user deploying the application (e.g in AWS Aurora).</p> <p>Starting with <code>tipg&gt;=0.12</code>, users can use environment variable <code>TIPG_DB_APPLICATION_SCHEMA</code> to change the schema where <code>tipg</code> will register the catalog function.</p> <p>Important</p> <p>This schema must already exist, and the logged in user must have full permissions to the schema!).</p>"},{"location":"advanced/functions/","title":"Function Layers","text":"<p><code>SQL Functions</code> are any procedural functions defined in the database that match the following criteria:</p> <ul> <li>Must be defined to return <code>SETOF</code></li> <li>Functions defined to return <code>RECORD</code> must include typed OUT definitions in the function signature</li> <li>All arguments (<code>IN</code> and <code>OUT</code>) must be named</li> <li>Functions that return a <code>geometry</code> will be usable as Features and Vector Tiles, those that do not, will be available to return json/csv</li> <li>Functions that match these qualifications will be found based on the DB visibility settings (schemas)</li> </ul> <p><code>SQL Function</code> arguments will be exposed to the items API as query parameters. Any argument that does not have a default will be required and will return an error if not set as a query parameter. Functions should have a unique name. Function overloading by argument type is not currently supported.</p> <p>If a function is defined to have <code>z</code>, <code>x</code>, or <code>y</code> parameters, those will be filled from the path parameters in requests to Tile endpoints. If a function has a <code>bounds</code> parameter, that will be populated by the Tile bounding box in requests to Tile endpoints. All other arguments will be filled from query parameters matching the name of the argument and cast to the appropriate types.</p> <p>At startup, <code>tipg</code> application will look for any SQL functions with the above signature and then get displayed as <code>Collections</code>:</p> <pre><code>curl -s http://127.0.0.1:8000/collections\\?f\\=json | jq -r '.collections[].id' | grep \"public.st_\"\npublic.st_squaregrid\npublic.st_hexagongrid\npublic.st_subdivide\n</code></pre> <p>Note: By default, <code>tipg</code> should find <code>st_squaregrid</code>, <code>st_hexagongrid</code>, and <code>st_subdivide</code> functions when using the <code>public</code> schema from PostGIS</p> <p>Important</p> <p><code>SQL Functions</code> can be pre-existent in the database, or you can tell <code>tipg</code> to register SQL code dynamically to the <code>pg_temp</code> schema at startup, see customization</p>"},{"location":"advanced/functions/#function-examples","title":"FUNCTION examples","text":"<p>With <code>geometry</code> input:</p> <pre><code>CREATE FUNCTION hexagons(\n    IN size int DEFAULT 10,\n    IN bounds geometry DEFAULT 'srid=4326;POLYGON((-180 -90,-180 90,180 90,180 -90,-180 -90))'::geometry,\n    OUT geom geometry,\n    OUT i integer,\n    OUT j integer\n) RETURNS SETOF RECORD AS $$\n    SELECT * FROM st_hexagongrid(size, bounds);\n$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;\n</code></pre> <p>Only returning geometries:</p> <pre><code>CREATE FUNCTION hexagons(\n    IN size int DEFAULT 10,\n    IN bounds geometry DEFAULT 'srid=4326;POLYGON((-180 -90,-180 90,180 90,180 -90,-180 -90))'::geometry,\n    OUT geom geometry,\n) RETURNS SETOF geometry AS $$\n    SELECT geom FROM st_hexagongrid(size, bounds);\n$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;\n</code></pre> <p>With <code>x</code>, <code>y</code>, <code>z</code> input:</p> <pre><code>CREATE FUNCTION landsat(\n    IN z int,\n    IN x int,\n    IN y int,\n    IN p int default 0,\n    OUT path_row text,\n    OUT grid_path int,\n    OUT grid_row int,\n    OUT geom geometry\n) RETURNS SETOF RECORD AS $$\n    SELECT pr as path_row, path as grid_path, row AS grid_row, geom FROM public.landsat_wrs WHERE path = p AND ST_Intersects(geom, ST_Transform(ST_TileEnvelope(z, x, y), 4326));\n$$ LANGUAGE SQL IMMUTABLE PARALLEL SAFE;\n</code></pre> <pre><code>curl -s http://127.0.0.1:8000/collections/pg_temp.landsat/queryables?f=schemajson | jq\n\n{\n  \"title\": \"pg_temp.landsat\",\n  \"properties\": {\n    \"geom\": {\n      \"$ref\": \"https://geojson.org/schema/Geometry.json\"\n    },\n    \"grid_path\": {\n      \"name\": \"grid_path\",\n      \"type\": \"number\"\n    },\n    \"grid_row\": {\n      \"name\": \"grid_row\",\n      \"type\": \"number\"\n    },\n    \"path_row\": {\n      \"name\": \"path_row\",\n      \"type\": \"string\"\n    }\n  },\n  \"type\": \"object\",\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"$id\": \"http://127.0.0.1:8000/collections/pg_temp.landsat/queryables?f=schemajson\"\n}\n</code></pre>"},{"location":"advanced/functions/#view-example","title":"VIEW example","text":"<pre><code>CREATE OR REPLACE VIEW landsat_centroids AS\nSELECT ogc_fid, pr, st_pointonsurface(geom) as geom, path, row\nFROM public.landsat_wrs;\n</code></pre> <pre><code>curl -s http://127.0.0.1:8000/collections/pg_temp.landsat_centroids/queryables?f=schemajson | jq\n{\n  \"title\": \"pg_temp.landsat_centroids\",\n  \"properties\": {\n    \"geom\": {\n      \"$ref\": \"https://geojson.org/schema/Geometry.json\"\n    },\n    \"ogc_fid\": {\n      \"name\": \"ogc_fid\",\n      \"type\": \"number\"\n    },\n    \"path\": {\n      \"name\": \"path\",\n      \"type\": \"number\"\n    },\n    \"pr\": {\n      \"name\": \"pr\",\n      \"type\": \"string\"\n    },\n    \"row\": {\n      \"name\": \"row\",\n      \"type\": \"number\"\n    }\n  },\n  \"type\": \"object\",\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"$id\": \"http://127.0.0.1:8000/collections/pg_temp.landsat_centroids/queryables?f=schemajson\"\n}\n</code></pre>"},{"location":"advanced/ogc_features_server/","title":"TiPg Features server","text":"<p><code>TiPg</code> default application comes with both OGC Tiles and Features endpoints but some users might just want one or the other. <code>TiPg</code> is built around the notion of endpoints factories which then makes easy to build custom applications with the desired set of endpoints.</p> <p>The code below shows how to create a simple OGC Features service.</p> <pre><code>\"\"\"OGC Features service.\"\"\"\n\nfrom contextlib import asynccontextmanager\n\nimport jinja2\n\nfrom tipg.collections import register_collection_catalog\nfrom tipg.database import close_db_connection, connect_to_db\nfrom tipg.errors import DEFAULT_STATUS_CODES, add_exception_handlers\nfrom tipg.factory import OGCFeaturesFactory\nfrom tipg.middleware import CacheControlMiddleware, CatalogUpdateMiddleware\nfrom tipg.settings import CustomSQLSettings, DatabaseSettings, PostgresSettings\n\nfrom fastapi import FastAPI\n\nfrom starlette.middleware.cors import CORSMiddleware\nfrom starlette.templating import Jinja2Templates\nfrom starlette_cramjam.middleware import CompressionMiddleware\n\npostgres_settings = PostgresSettings()\ndb_settings = DatabaseSettings()\ncustom_sql_settings = CustomSQLSettings()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"FastAPI Lifespan.\"\"\"\n    # Create Connection Pool\n    await connect_to_db(\n        app,\n        settings=postgres_settings,\n        schemas=db_settings.schemas,\n        user_sql_files=custom_sql_settings.sql_files,\n    )\n\n    # Register Collection Catalog\n    await register_collection_catalog(app, db_settings=db_settings)\n\n    yield\n\n    # Close the Connection Pool\n    await close_db_connection(app)\n\n\napp = FastAPI(\n    title=\"TiPG Features Server\",\n    openapi_url=\"/api\",\n    docs_url=\"/api.html\",\n    lifespan=lifespan,\n)\n\ntemplates = Jinja2Templates(\n    directory=\"\",  # we need to set a dummy directory variable, see https://github.com/encode/starlette/issues/1214\n    loader=jinja2.ChoiceLoader([jinja2.PackageLoader(\"tipg\", \"templates\")]),\n)  # type: ignore\n\nogc_features = OGCFeaturesFactory(\n    title=\"TiPG Features Server\",\n    templates=templates,\n    with_common=True,\n)\napp.include_router(ogc_features.router)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\"],\n    allow_headers=[\"*\"],\n)\napp.add_middleware(CacheControlMiddleware, cachecontrol=\"public, max-age=3600\")\napp.add_middleware(CompressionMiddleware)\napp.add_middleware(\n    CatalogUpdateMiddleware,\n    func=register_collection_catalog,\n    ttl=300,\n    db_settings=db_settings,\n)\n\nadd_exception_handlers(app, DEFAULT_STATUS_CODES)\n\n\n@app.get(\n    \"/healthz\",\n    description=\"Health Check.\",\n    summary=\"Health Check.\",\n    operation_id=\"healthCheck\",\n    tags=[\"Health Check\"],\n)\ndef ping():\n    \"\"\"Health check.\"\"\"\n    return {\"ping\": \"pong!\"}\n</code></pre>"},{"location":"advanced/ogc_tiles_server/","title":"TiPg Vector Tiles server","text":"<p><code>TiPg</code> default application comes with both OGC Tiles and Features endpoints but some users might just want one or the other. <code>TiPg</code> is built around the notion of endpoints factories which then makes easy to build custom applications with the desired set of endpoints.</p> <p>The code below shows how to create a simple OGC Vector tiles service.</p> <pre><code>\"\"\"OGC Vector Tiles service.\"\"\"\n\nfrom contextlib import asynccontextmanager\n\nimport jinja2\n\nfrom tipg.collections import register_collection_catalog\nfrom tipg.database import close_db_connection, connect_to_db\nfrom tipg.errors import DEFAULT_STATUS_CODES, add_exception_handlers\nfrom tipg.factory import OGCTilesFactory\nfrom tipg.middleware import CacheControlMiddleware, CatalogUpdateMiddleware\nfrom tipg.settings import CustomSQLSettings, DatabaseSettings, PostgresSettings\n\nfrom fastapi import FastAPI\n\nfrom starlette.middleware.cors import CORSMiddleware\nfrom starlette.templating import Jinja2Templates\nfrom starlette_cramjam.middleware import CompressionMiddleware\n\npostgres_settings = PostgresSettings()\ndb_settings = DatabaseSettings()\ncustom_sql_settings = CustomSQLSettings()\n\n\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    \"\"\"FastAPI Lifespan.\"\"\"\n    # Create Connection Pool\n    await connect_to_db(\n        app,\n        settings=postgres_settings,\n        schemas=db_settings.schemas,\n        user_sql_files=custom_sql_settings.sql_files,\n    )\n\n    # Register Collection Catalog\n    await register_collection_catalog(\n        app,\n        db_settings=db_settings,\n    )\n\n    yield\n\n    # Close the Connection Pool\n    await close_db_connection(app)\n\n\napp = FastAPI(\n    title=\"TiPG Vector Tiles Server\",\n    openapi_url=\"/api\",\n    docs_url=\"/api.html\",\n    lifespan=lifespan,\n)\n\ntemplates = Jinja2Templates(\n    directory=\"\",  # we need to set a dummy directory variable, see https://github.com/encode/starlette/issues/1214\n    loader=jinja2.ChoiceLoader([jinja2.PackageLoader(\"tipg\", \"templates\")]),\n)  # type: ignore\n\nogc_tiles = OGCTilesFactory(\n    title=\"TiPG Vector Tiles Server\",\n    templates=templates,\n    with_common=True,\n    with_viewer=True,\n)\napp.include_router(ogc_tiles.router)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"GET\"],\n    allow_headers=[\"*\"],\n)\napp.add_middleware(CacheControlMiddleware, cachecontrol=\"public, max-age=3600\")\napp.add_middleware(CompressionMiddleware)\napp.add_middleware(\n    CatalogUpdateMiddleware,\n    func=register_collection_catalog,\n    ttl=300,\n    db_settings=db_settings,\n)\n\nadd_exception_handlers(app, DEFAULT_STATUS_CODES)\n\n\n@app.get(\n    \"/healthz\",\n    description=\"Health Check.\",\n    summary=\"Health Check.\",\n    operation_id=\"healthCheck\",\n    tags=[\"Health Check\"],\n)\ndef ping():\n    \"\"\"Health check.\"\"\"\n    return {\"ping\": \"pong!\"}\n</code></pre>"},{"location":"user_guide/configuration/","title":"Configuration","text":"<p><code>tipg</code> uses starlette's configuration pattern which make use of environment variable and/or <code>.env</code> file.</p> <p>Example of <code>.env</code> file can be found in .env.example</p>"},{"location":"user_guide/configuration/#db-connection-settings","title":"DB connection settings","text":"<p>class: <code>tipg.settings.PostgresSettings</code></p>"},{"location":"user_guide/configuration/#database-address","title":"Database address","text":"<p>You can pass either the Postgres DSN using <code>DATABASE_URL</code> or with each specific values for usernane, password, host, port and database name.</p> <ul> <li>POSTGRES_USER (str): Username</li> <li>POSTGRES_PASS (str): Password</li> <li>POSTGRES_HOST (str): Hostname (e.g <code>127.0.0.1</code>)</li> <li>POSTGRES_PORT (str): Port number (e.g <code>5432</code>)</li> <li>POSTGRES_DBNAME (str): Database name (e.g <code>postgis</code>)</li> </ul> <pre><code>POSTGRES_USER=username\nPOSTGRES_PASS=password\nPOSTGRES_HOST=0.0.0.0\nPOSTGRES_PORT=5432\nPOSTGRES_DNAME=postgis\n</code></pre> <p>Or</p> <ul> <li>DATABASE_URL (str): Full postgres DSN in form of <code>postgresql://user[:password]@[host][:port][/dbname]</code></li> </ul> <pre><code>DATABASE_URL=postgresql://username:password@0.0.0.0:5432/postgis\n</code></pre>"},{"location":"user_guide/configuration/#connection-pools-configuration","title":"Connection Pools configuration","text":"<ul> <li>DB_MIN_CONN_SIZE (int): Number of connection the pool will be initialized with. Default is <code>1</code></li> <li>DB_MAX_CONN_SIZE (int): Max number of connections in the pool. Default is <code>10</code></li> <li>DB_MAX_QUERIES (int): Number of queries after a connection is closed and replaced with a new connection. Default is <code>50000</code></li> <li>DB_MAX_INACTIVE_CONN_LIFETIME (float): Number of seconds after which inactive connections in the pool will be closed. Pass 0 to disable this mechanism. Default is <code>300</code></li> </ul> <p>ref: magicstack.github.io/asyncpg/current/api/index.html#connection-pools</p>"},{"location":"user_guide/configuration/#db-visibility-settings","title":"DB visibility settings","text":"<p>class: <code>tipg.settings.DatabaseSettings</code></p> <p>prefix: <code>TIPG_DB_</code></p> <ul> <li>SCHEMAS (list of string): Named schemas, <code>tipg</code> can look for <code>Tables</code> or <code>Functions</code>. Default is <code>[\"public\"]</code></li> <li>SPATIAL_EXTENT (bool): Calculate spatial extent of records. Default is <code>True</code>.</li> <li>DATETIME_EXTENT (bool): Calculate temporal extent of records. Default is <code>True</code>.</li> </ul>"},{"location":"user_guide/configuration/#tables","title":"<code>Tables</code>","text":"<ul> <li>TABLES (list of string): Allow only specific <code>Tables</code></li> <li>EXCLUDE_TABLES (list of string): Excludes specific <code>Tables</code></li> <li>EXCLUDE_TABLE_SCHEMAS (list of string): Excludes <code>Schemas</code> for <code>Tables</code> lookup.</li> <li>ONLY_SPATIAL_TABLES (bool): Accept <code>Tables</code> without <code>geometry</code> or <code>geography</code> column. Default is <code>True</code>.</li> </ul>"},{"location":"user_guide/configuration/#functions","title":"<code>Functions</code>","text":"<ul> <li>FUNCTIONS (list of string): Allow only specific <code>Functions</code></li> <li>EXCLUDE_FUNCTIONS (list of string): Excludes specific <code>Functions</code></li> <li>EXCLUDE_FUNCTION_SCHEMAS (list of string): Excludes <code>Schemas</code> for <code>Functions</code> lookup.</li> </ul> <pre><code>TIPG_DB_SCHEMAS='[\"myschema\", \"public\"]'\nTIPG_DB_EXCLUDE_FUNCTION_SCHEMAS='[\"public\"]'\n</code></pre>"},{"location":"user_guide/configuration/#table-settings","title":"Table settings","text":"<p>class: <code>tipg.settings.TableSettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>DATETIME_EXTENT (bool): Fetch datetime extent by going throught all rows. Default is <code>True</code></li> <li>FALLBACK_KEY_NAMES (list of string): Primary Key names to look for in the tables. Default is <code>[\"ogc_fid\", \"id\", \"pkey\", \"gid\"]</code></li> <li>SORT_COLUMNS (bool): Sort the <code>columns</code> for a table alphabetically. Default is <code>True</code>.</li> <li>TABLE_CONFIG (dict of <code>TableConfig</code>)<ul> <li>TABLE_CONFIG_ _ {schemaId}_{tableId} _ _GEOMCOL (str): Table's geometry/geography column name</li> <li>TABLE_CONFIG_ _ {schemaId}_{tableId} _ _DATETIMECOL (str): Table's datetime column name</li> <li>TABLE_CONFIG_ _ {schemaId}_{tableId} _ _PK (str): Table's primary key</li> <li>TABLE_CONFIG_ _ {schemaId}_{tableId} _ _PROPERTIES (list of string): Select specific properties from table (for filtering and output)</li> </ul> </li> </ul> <pre><code>TIPG_TABLE_CONFIG__pgstac_items__PK=id\n</code></pre>"},{"location":"user_guide/configuration/#custom-sql-function","title":"Custom SQL Function","text":"<p><code>TiPG</code> allows for exposing custom <code>SQL Functions</code> as collections (see developmentseed.org/tipg/advanced/functions/)</p> <p>class: <code>tipg.settings.CustomSQLSettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>CUSTOM_SQL_DIRECTORY (str): path to the directory containing <code>.sql</code> files.</li> </ul> <pre><code>TIPG_CUSTOM_SQL_DIRECTORY=/tmp/functions\n</code></pre> <p>Note: On each <code>connection</code> creation, <code>TiPG</code> will look for all the files within the directory and execute them within the <code>pg_temp</code> schema.</p>"},{"location":"user_guide/configuration/#vector-tiles-settings","title":"Vector Tiles settings","text":"<p>class: <code>tipg.settings.MVTSettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>TILE_RESOLUTION (int): Default is <code>4096</code></li> <li>TILE_BUFFER (int): Default is <code>256</code></li> <li>TILE_CLIP (bool): Default is <code>True</code></li> <li>MAX_FEATURE_PER_TILE (int): Default is <code>10000</code></li> <li>SET_MVT_LAYERNAME (bool): Set MVT layername from Table ID. Default is <code>False</code> (\"default\")</li> </ul> <pre><code>TIPG_MAX_FEATURE_PER_TILE=1000\n</code></pre>"},{"location":"user_guide/configuration/#features-settings","title":"Features settings","text":"<p>class: <code>tipg.settings.FeaturesSettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>DEFAULT_FEATURES_LIMIT (int): Set the default <code>Limit</code> values for <code>/items</code> endpoint. Default is <code>10</code></li> <li>MAX_FEATURES_PER_QUERY (int): Set the maximum number of features the <code>/items</code> endpoint can return. Default is <code>10000</code>.</li> </ul> <pre><code>TIPG_DEFAULT_FEATURES_LIMIT=1000 TIPG_MAX_FEATURES_PER_QUERY=2000\n</code></pre>"},{"location":"user_guide/configuration/#tile-matrix-sets-setting","title":"Tile Matrix Sets setting","text":"<p>class: <code>tipg.settings.TMSSettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>DEFAULT_TMS (str): Default TileMatrixSetId for tiles endpoint. Default is <code>WebMercatorQuad</code></li> <li>DEFAULT_MINZOOM (int): Default <code>MinZoom</code> for tiles endpoints. Default is <code>0</code></li> <li>DEFAULT_MAXZOOM (int): Default <code>MaxZoom</code> for tiles endpoints. Default is <code>22</code></li> </ul>"},{"location":"user_guide/configuration/#tipg-application-settings","title":"TiPG Application settings","text":"<p>Settings to control <code>TiPG</code> default's FastAPI application.</p> <p>class: <code>tipg.settings.APISettings</code></p> <p>prefix: <code>TIPG_</code></p> <ul> <li>NAME (str): Set custom name for <code>TiPG</code> app. Default is <code>TiPg: OGC Features and Tiles API</code></li> <li>DEBUG (bool): Default is <code>False</code></li> <li>CORS_ORIGIN (str): Default is <code>*</code></li> <li>CACHECONTROL (str): Default is <code>public, max-age=3600</code></li> <li>TEMPLATE_DIRECTORY (str): Path to custom template directory to overwrite the HTML files.</li> <li>ROOT_PATH (str): A path prefix handled by a proxy that is not seen by the application but is seen by external clients.</li> <li>ADD_TILES_VIEWER (bool): Defaults is <code>True</code></li> <li>CATALOG_TTL (int, in seconds): Tables/Functions catalog Time To Live cache (default to 300 seconds).</li> </ul>"},{"location":"user_guide/endpoints/","title":"Endpoints documentation","text":""},{"location":"user_guide/endpoints/#ogc-common","title":"OGC Common","text":""},{"location":"user_guide/endpoints/#landing-page","title":"Landing page","text":"<p>Path: <code>/</code></p> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>]): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081 | jq\n{\n  \"title\": \"TiPg: OGC Features and Tiles API\",\n  \"links\": [\n    {\n      \"href\": \"http://127.0.0.1:8081/\",\n      \"rel\": \"self\",\n      \"type\": \"application/json\",\n      \"title\": \"Landing Page\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/api\",\n      \"rel\": \"service-desc\",\n      \"type\": \"application/vnd.oai.openapi+json;version=3.0\",\n      \"title\": \"the API definition (JSON)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/api.html\",\n      \"rel\": \"service-doc\",\n      \"type\": \"text/html\",\n      \"title\": \"the API documentation\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/conformance\",\n      \"rel\": \"conformance\",\n      \"type\": \"application/json\",\n      \"title\": \"Conformance\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"title\": \"List of Collections\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"templated\": true,\n      \"title\": \"Collection metadata (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/queryables\",\n      \"rel\": \"queryables\",\n      \"type\": \"application/schema+json\",\n      \"templated\": true,\n      \"title\": \"Collection queryables (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/items\",\n      \"rel\": \"data\",\n      \"type\": \"application/geo+json\",\n      \"templated\": true,\n      \"title\": \"Collection Features (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/items/{itemId}\",\n      \"rel\": \"data\",\n      \"type\": \"application/geo+json\",\n      \"templated\": true,\n      \"title\": \"Collection Feature (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/tiles/{z}/{x}/{y}\",\n      \"rel\": \"data\",\n      \"type\": \"application/vnd.mapbox-vector-tile\",\n      \"templated\": true,\n      \"title\": \"Collection Vector Tiles (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/tiles\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"templated\": true,\n      \"title\": \"Collection TileSets (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/tiles/{tileMatrixSetId}\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"templated\": true,\n      \"title\": \"Collection TileSet (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/{collectionId}/tiles/{tileMatrixSetId}/viewer\",\n      \"rel\": \"data\",\n      \"type\": \"text/html\",\n      \"templated\": true,\n      \"title\": \"Collection Map viewer (Template URL)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/tileMatrixSets\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"title\": \"TileMatrixSets\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/tileMatrixSets/{tileMatrixSetId}\",\n      \"rel\": \"data\",\n      \"type\": \"application/json\",\n      \"templated\": true,\n      \"title\": \"TileMatrixSet (Template URL)\"\n    }\n  ]\n}\n</code></pre> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#_api_landing_page</p>"},{"location":"user_guide/endpoints/#conformance-declaration","title":"Conformance declaration","text":"<p>Path: <code>/conformance</code></p> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/conformance | jq\n{\n  \"conformsTo\": [\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core\",\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/landingPage\",\n    \"http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/collections\",\n    \"http://www.opengis.net/spec/ogcapi-common-2/1.0/conf/simple-query\",\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json\",\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html\",\n    \"http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30\",\n    \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core\",\n    \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html\",\n    \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/oas30\",\n    \"http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson\",\n    \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/filter\",\n    \"http://www.opengis.net/spec/ogcapi-features-3/1.0/conf/features-filter\",\n    \"http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/core\",\n    \"http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/oas30\",\n    \"http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/mvt\",\n    \"http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tileset\",\n    \"http://www.opengis.net/spec/ogcapi-tiles-1/1.0/conf/tilesets-list\"\n  ]\n}\n</code></pre> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#_declaration_of_conformance_classes</p>"},{"location":"user_guide/endpoints/#ogc-features-api","title":"OGC Features API","text":""},{"location":"user_guide/endpoints/#list-feature-collections","title":"List Feature Collections","text":"<p>Path: <code>/collections</code></p> <p>QueryParams:</p> <ul> <li>limit (int): Limits the number of collections in the response.</li> <li>offset (int): Collection's offset.</li> <li>bbox (str): Comma (,) delimited bbox coordinates to spatially filter collection in <code>minx,miny,maxx,maxy</code> form.</li> <li> <p>datetime (str): Single datetime or <code>/</code> delimited datetime intervals to temporally filter features.</p> <ul> <li>interval-bounded            = <code>date-time/date-time</code></li> <li>interval-half-bounded-start = <code>../date-time</code></li> <li>interval-half-bounded-end   = <code>date-time/..</code></li> <li>datetime                    = <code>date-time</code></li> </ul> </li> <li> <p>type * (\"Function\" or \"Table\"): Filter collections based on their <code>type</code>.</p> </li> <li> <p>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</p> </li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>*  Not in OGC API Features Specification</p> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections?limit=1&amp;offset=2 | jq\n{\n  \"links\": [\n    {\n      \"href\": \"http://127.0.0.1:8081/collections\",\n      \"rel\": \"self\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections?limit=1&amp;offset=3&amp;f=json\",\n      \"rel\": \"next\",\n      \"type\": \"application/json\",\n      \"title\": \"Next page\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections?limit=1&amp;f=json&amp;offset=1\",\n      \"rel\": \"prev\",\n      \"type\": \"application/json\",\n      \"title\": \"Previous page\"\n    }\n  ],\n  \"numberMatched\": 7,\n  \"numberReturned\": 1,\n  \"collections\": [\n    {\n      \"id\": \"public.gg_gemeindegrenze_mv\",\n      \"title\": \"public.gg_gemeindegrenze_mv\",\n      \"links\": [\n        {\n          \"href\": \"http://127.0.0.1:8081/collections/public.gg_gemeindegrenze_mv\",\n          \"rel\": \"collection\",\n          \"type\": \"application/json\"\n        },\n        {\n          \"href\": \"http://127.0.0.1:8081/collections/public.gg_gemeindegrenze_mv/items\",\n          \"rel\": \"items\",\n          \"type\": \"application/geo+json\"\n        },\n        {\n          \"href\": \"http://127.0.0.1:8081/collections/public.gg_gemeindegrenze_mv/queryables\",\n          \"rel\": \"queryables\",\n          \"type\": \"application/schema+json\"\n        }\n      ],\n      \"extent\": {\n        \"spatial\": {\n          \"bbox\": [\n            [\n              8.661115396174294,\n              47.367809019968455,\n              9.4846396724923,\n              47.69564287160094\n            ]\n          ],\n          \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n        }\n      },\n      \"itemType\": \"feature\",\n      \"crs\": [\n        \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#collections</p>"},{"location":"user_guide/endpoints/#feature-collections-metadata","title":"Feature Collection's Metadata","text":"<p>Path: <code>/collections/{collectionId}</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections/public.countries | jq\n{\n  \"id\": \"public.countries\",\n  \"title\": \"public.countries\",\n  \"links\": [\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries\",\n      \"rel\": \"self\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries/items\",\n      \"rel\": \"items\",\n      \"type\": \"application/geo+json\",\n      \"title\": \"Items\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries/items?f=csv\",\n      \"rel\": \"alternate\",\n      \"type\": \"text/csv\",\n      \"title\": \"Items (CSV)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries/items?f=geojsonseq\",\n      \"rel\": \"alternate\",\n      \"type\": \"application/geo+json-seq\",\n      \"title\": \"Items (GeoJSONSeq)\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries/queryables\",\n      \"rel\": \"queryables\",\n      \"type\": \"application/schema+json\",\n      \"title\": \"Queryables\"\n    }\n  ],\n  \"extent\": {\n    \"spatial\": {\n      \"bbox\": [\n        [\n          -180,\n          -89.99892578125002,\n          180,\n          83.599609375\n        ]\n      ],\n      \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n    }\n  },\n  \"itemType\": \"feature\",\n  \"crs\": [\n    \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"\n  ]\n}\n</code></pre> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#collection</p>"},{"location":"user_guide/endpoints/#feature-collections-queryables","title":"Feature Collection's Queryables","text":"<p>Path: <code>/collections/{collectionId}/queryables</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>f (str, one of [<code>json</code>, <code>html</code>]): Select response MediaType.</li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/json</code>, <code>text/html</code>])): Select response MediaType.</li> </ul> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections/public.landsat_wrs/queryables | jq\n{\n  \"title\": \"public.landsat_wrs\",\n  \"properties\": {\n    \"geom\": {\n      \"$ref\": \"https://geojson.org/schema/Geometry.json\"\n    },\n    \"id\": {\n      \"name\": \"id\",\n      \"type\": \"string\"\n    },\n    \"ogc_fid\": {\n      \"name\": \"ogc_fid\",\n      \"type\": \"number\"\n    },\n    \"path\": {\n      \"name\": \"path\",\n      \"type\": \"number\"\n    },\n    \"pr\": {\n      \"name\": \"pr\",\n      \"type\": \"string\"\n    },\n    \"row\": {\n      \"name\": \"row\",\n      \"type\": \"number\"\n    }\n  },\n  \"type\": \"object\",\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"$id\": \"http://127.0.0.1:8081/collections/public.landsat_wrs/queryables?f=schemajson\"\n}\n</code></pre> <p>Ref: http://docs.ogc.org/DRAFTS/19-079r1.html#filter-queryables</p>"},{"location":"user_guide/endpoints/#features","title":"Features","text":"<p>Path: <code>/collections/{collectionId}/items</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul> <p>QueryParams:</p> <ul> <li>limit (int): Limits the number of features in the response. Defaults to 10.</li> <li>offset (int): Features offset.</li> <li>bbox (str): Comma (,) delimited bbox coordinates to spatially filter features in <code>minx,miny,maxx,maxy</code> form.</li> <li> <p>datetime (str): Single datetime or <code>/</code> delimited datetime intervals to temporally filter features.</p> <ul> <li>interval-bounded            = <code>date-time/date-time</code></li> <li>interval-half-bounded-start = <code>../date-time</code></li> <li>interval-half-bounded-end   = <code>date-time/..</code></li> <li>datetime                    = <code>date-time</code></li> </ul> </li> <li> <p>ids * (str): Comma (,) delimited list of item Ids.</p> </li> <li>properties * (str): Comma (,) delimited list of item properties to return in each feature.</li> <li>filter (str): CQL2 filter as defined by docs.ogc.org/DRAFTS/19-079r1.html#rc_filter</li> <li>filter-lang (str, one of [<code>cql2-text</code>, <code>cql2-json</code>]): <code>Filter</code> language. Defaults to <code>cql2-text</code>.</li> <li>geom-column * (str): Select geometry column to apply filter on and to create geometry from.</li> <li>datetime-column * (str): Select datetime column to apply filter on.</li> <li>sortby (str): Sort the items by a specific column (ascending (default) or descending). argument should be in form of <code>-/+{column}</code>.</li> <li>bbox-only  * (bool): Only return the bounding box of the feature.</li> <li> <p>simplify * (float): Simplify the output geometry to given threshold in decimal degrees.</p> </li> <li> <p>f (str, one of [<code>geojson</code>, <code>html</code>, <code>json</code>, <code>csv</code>, <code>geojsonseq</code>, <code>ndjson</code>]): Select response MediaType.</p> </li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/geo+json</code>, <code>text/html</code>, <code>application/json</code>, <code>text/csv</code>, <code>application/geo+json-seq</code>, <code>application/ndjson</code>])): Select response MediaType.</li> </ul> <p>*  Not in OGC API Features Specification</p> <p>Important</p> <p>Additional query-parameters (form <code>PROP=VALUE</code>) will be considered as a property filter. Properties (<code>PROP</code>) not matching collection's column will be ignored.</p> <p>Tricks</p> <p><code>geom-column=None</code> will return a response without geometry information</p> <p>Example:</p> <ul> <li><code>http://127.0.0.1:8081/collections/public.countries/items</code></li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?limit=1</code> limit to only 1 feature</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?limit=1&amp;offset=2</code> limit to only 1 feature and add offset 2 (return the third feature of the collection)</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?sortby=-name</code> *sort countries by name in the descending order</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?bbox=-94.702148,34.488448,-85.429688,41.112469</code> limit result to a specific bbox.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?ids=1,2,3</code> limit result to ids <code>1</code>, <code>2</code> and <code>3</code></li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?properties=name</code> only return <code>name</code> property</li> </ul> <p>Property Filter</p> <ul> <li><code>http://127.0.0.1:8081/collections/public.countries/items?name=Zimbabwe</code> only return features where property <code>name==Zimbabwe</code></li> </ul> <p>Datetime</p> <ul> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z</code> return features with datetime column with value <code>==2004-10-19T10:23:54Z</code>.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=../2004-10-19T10:23:54Z</code> return features with datetime column with value <code>&lt;=2004-10-19T10:23:54Z</code>.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z/..</code> return features with datetime column with value <code>&gt;=2004-10-19T10:23:54Z</code>.</li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?datetime=2004-10-19T10:23:54Z/2004-10-20T10:23:54Z</code> return features with datetime column with value between <code>2004-10-19T10:23:54Z</code> and <code>2004-10-20T10:23:54Z</code>.</li> </ul> <p>CQL2</p> <ul> <li><code>http://127.0.0.1:8081/collections/public.countries/items?filter-lang=cql2-json&amp;filter={\"op\":\"=\",\"args\":[{\"property\":\"ogc_fid\"},1]}</code></li> <li><code>http://127.0.0.1:8081/collections/public.countries/items?filter-lang=cql2-text&amp;filter=ogc_fid=1</code></li> </ul> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#items and https://docs.ogc.org/DRAFTS/19-079r1.html#filter-param</p>"},{"location":"user_guide/endpoints/#feature","title":"Feature","text":"<p>Path: <code>/collections/{collectionId}/items/{itemId}</code></p> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>itemId (str): Feature Id</li> </ul> <p>QueryParams:</p> <ul> <li>geom-column * (str): Select geometry column to create geometry from.</li> <li>bbox-only  * (bool): Only return the bounding box of the feature.</li> <li> <p>simplify * (float): Simplify the output geometry to given threshold in decimal degrees.</p> </li> <li> <p>f (str, one of [<code>geojson</code>, <code>html</code>, <code>json</code>]): Select response MediaType.</p> </li> </ul> <p>HeaderParams:</p> <ul> <li>accept (str, one of [<code>application/geo+json</code>, <code>text/html</code>, <code>application/json</code>])): Select response MediaType.</li> </ul> <p>*  Not in OGC API Features Specification</p> <p>Example:</p> <pre><code>curl http://127.0.0.1:8081/collections/public.countries/items/6 | jq\n{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"MultiPolygon\",\n    \"coordinates\": [\n      [\n        [\n          [\n            12.439160156,\n            41.898388672\n          ],\n          [\n            12.430566406,\n            41.897558594\n          ],\n          [\n            12.427539063,\n            41.900732422\n          ],\n          [\n            12.430566406,\n            41.90546875\n          ],\n          [\n            12.438378906,\n            41.906201172\n          ],\n          [\n            12.439160156,\n            41.898388672\n          ]\n        ]\n      ]\n    ]\n  },\n  \"id\": 6,\n  \"properties\": {\n    \"abbrev\": \"Vat.\",\n    \"abbrev_len\": 4,\n    \"adm0_a3\": \"VAT\",\n    \"adm0_a3_is\": \"VAT\",\n    \"adm0_a3_un\": -99,\n    \"adm0_a3_us\": \"VAT\",\n    \"adm0_a3_wb\": -99,\n    \"adm0_dif\": 0,\n    \"admin\": \"Vatican\",\n    ...\n  },\n  \"links\": [\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries\",\n      \"rel\": \"collection\",\n      \"type\": \"application/json\"\n    },\n    {\n      \"href\": \"http://127.0.0.1:8081/collections/public.countries/items/6\",\n      \"rel\": \"self\",\n      \"type\": \"application/geo+json\"\n    }\n  ]\n}\n</code></pre> <p>Ref: https://docs.ogc.org/is/17-069r4/17-069r4.html#feature</p>"},{"location":"user_guide/endpoints/#ogc-tiles-api","title":"OGC Tiles API","text":""},{"location":"user_guide/endpoints/#vector-tiles","title":"Vector Tiles","text":"<p>Path:</p> <ul> <li><code>/collections/{collectionId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> <li>z (int): TMS's scale (tileMatrix) identifier</li> <li>x (int): TMS's column (tileCol) identifier</li> <li>y (int): TMS's row (tileRow) identifier</li> </ul> <p>QueryParams:</p> <ul> <li>limit (int): Limits the number of features in the response. Defaults to 10000.</li> <li>bbox (str): Comma (,) delimited bbox coordinates to spatially filter features in <code>minx,miny,maxx,maxy</code> form.</li> <li> <p>datetime (str): Single datetime or <code>/</code> delimited datetime intervals to temporally filter features.</p> <ul> <li>interval-bounded            = <code>date-time/date-time</code></li> <li>interval-half-bounded-start = <code>../date-time</code></li> <li>interval-half-bounded-end   = <code>date-time/..</code></li> <li>datetime                    = <code>date-time</code></li> </ul> </li> <li> <p>ids * (str): Comma (,) delimited list of item Ids.</p> </li> <li>properties * (str): Comma (,) delimited list of item properties to return in each feature.</li> <li>filter (str): CQL2 filter as defined by docs.ogc.org/DRAFTS/19-079r1.html#rc_filter</li> <li>filter-lang (str, one of [<code>cql2-text</code>, <code>cql2-json</code>]): <code>Filter</code> language. Defaults to <code>cql2-text</code>.</li> <li>geom-column * (str): Select geometry column to apply filter on and to create geometry from.</li> <li>datetime-column * (str): Select datetime column to apply filter on.</li> <li>sortby (str): Sort the items by a specific column (ascending (default) or descending). argument should be in form of <code>-/+{column}</code>.</li> <li>bbox-only  * (bool): Only return the bounding box of the feature.</li> <li>simplify * (float): Simplify the output geometry to given threshold in decimal degrees.</li> </ul> <p>*  Not in OGC API Features Specification</p>"},{"location":"user_guide/endpoints/#tileset-list","title":"Tileset list","text":"<p>Path:</p> <ul> <li><code>/collections/{collectionId}/tiles</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> </ul>"},{"location":"user_guide/endpoints/#tileset-metadata","title":"Tileset metadata","text":"<p>Path:</p> <ul> <li><code>/collections/{collectionId}/tiles/{tileMatrixSetId}</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> </ul>"},{"location":"user_guide/endpoints/#tilematrixsets","title":"TileMatrixSets","text":"<p>List Available TileMatrixSets</p> <p>Path:</p> <ul> <li><code>/tileMatrixSets</code></li> </ul>"},{"location":"user_guide/endpoints/#tilematrixset","title":"TileMatrixSet","text":"<p>Return TileMatrixSet document</p> <p>Path:</p> <ul> <li><code>/tileMatrixSets/{tileMatrixSetId}</code></li> </ul> <p>PathParams:</p> <ul> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> </ul>"},{"location":"user_guide/endpoints/#tilejson","title":"TileJSON","text":"<p>Return a TileJSON document. Not in OGC Tile API specification</p> <p>Path:</p> <ul> <li><code>/collections/{collectionId}/{tileMatrixSetId}/tilejson.json</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> </ul> <p>QueryParams:</p> <ul> <li>minzoom (int): Set TileJSON document minzoom (default is the setting default or TMS default)</li> <li>maxzoom (int): Set TileJSON document maxzoom (default is the setting default or TMS default)</li> <li>geom-column * (str): Select the geometry column to retrieve collection's bounds from.</li> </ul> <p>Important</p> <p>Additional query-parameters will be forwarded to the tiles endpoint.</p> <p>*  Not in OGC API Tiles Specification</p> <p>Example: <pre><code>curl http://127.0.0.1:8081/collections/public.landsat_wrs/WebMercatorQuad/tilejson.json | jq\n{\n  \"tilejson\": \"3.0.0\",\n  \"name\": \"public.landsat_wrs\",\n  \"version\": \"1.0.0\",\n  \"scheme\": \"xyz\",\n  \"tiles\": [\n    \"http://127.0.0.1:8081/collections/public.landsat_wrs/tiles/WebMercatorQuad/{z}/{x}/{y}\"\n  ],\n  \"vector_layers\": [\n    {\n      \"id\": \"default\",\n      \"fields\": {\n        \"id\": \"string\",\n        \"ogc_fid\": \"number\",\n        \"path\": \"number\",\n        \"pr\": \"string\",\n        \"row\": \"number\"\n      },\n      \"minzoom\": 0,\n      \"maxzoom\": 22\n    }\n  ],\n  \"minzoom\": 0,\n  \"maxzoom\": 22,\n  \"bounds\": [\n    -180,\n    -82.6401,\n    180,\n    82.6401\n  ],\n  \"center\": [\n    0,\n    0,\n    0\n  ]\n}\n</code></pre></p>"},{"location":"user_guide/endpoints/#stylejson","title":"StyleJSON","text":"<p>Return a mapbox/maplibre StyleJSON document. Not in OGC Tile API specification</p> <p>Path:</p> <ul> <li><code>/collections/{collectionId}/{tileMatrixSetId}/style.json</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> </ul> <p>QueryParams:</p> <ul> <li>minzoom (int): Set TileJSON document minzoom (default is the setting default or TMS default)</li> <li>maxzoom (int): Set TileJSON document maxzoom (default is the setting default or TMS default)</li> <li>geom-column * (str): Select the geometry column to retrieve collection's bounds from.</li> </ul> <p>Important</p> <p>Additional query-parameters will be forwarded to the tiles endpoint.</p> <p>*  Not in OGC API Tiles Specification</p> <pre><code>// http://127.0.0.1:8081/collections/public.landsat_wrs/WebMercatorQuad/style.json\n{\n  \"version\": 8,\n  \"name\": \"TiPg\",\n  \"layers\": [\n    {\n      \"id\": \"public.landsat_wrs_fill\",\n      \"source\": \"public.landsat_wrs\",\n      \"source-layer\": \"default\",\n      \"type\": \"fill\",\n      \"filter\": [\n        \"==\",\n        [\n          \"geometry-type\"\n        ],\n        \"Polygon\"\n      ],\n      \"paint\": {\n        \"fill-color\": \"rgba(200, 100, 240, 0.4)\",\n        \"fill-outline-color\": \"#000\"\n      }\n    },\n    {\n      \"id\": \"public.landsat_wrs_stroke\",\n      \"source\": \"public.landsat_wrs\",\n      \"source-layer\": \"default\",\n      \"type\": \"line\",\n      \"filter\": [\n        \"==\",\n        [\n          \"geometry-type\"\n        ],\n        \"LineString\"\n      ],\n      \"paint\": {\n        \"line-color\": \"#000\",\n        \"line-width\": 1,\n        \"line-opacity\": 0.75\n      }\n    },\n    {\n      \"id\": \"public.landsat_wrs_point\",\n      \"source\": \"public.landsat_wrs\",\n      \"source-layer\": \"default\",\n      \"type\": \"circle\",\n      \"filter\": [\n        \"==\",\n        [\n          \"geometry-type\"\n        ],\n        \"Point\"\n      ],\n      \"paint\": {\n        \"circle-color\": \"#000\",\n        \"circle-radius\": 2.5,\n        \"circle-opacity\": 0.75\n      }\n    }\n  ],\n  \"sources\": {\n    \"public.landsat_wrs\": {\n      \"type\": \"vector\",\n      \"scheme\": \"xyz\",\n      \"tiles\": [\n        \"http://127.0.0.1:8081/collections/public.landsat_wrs/tiles/WebMercatorQuad/{z}/{x}/{y}\"\n      ],\n      \"bounds\": [\n        -180,\n        -82.6401,\n        180,\n        82.6401\n      ],\n      \"minzoom\": 0,\n      \"maxzoom\": 22\n    }\n  },\n  \"center\": [\n    0,\n    0\n  ],\n  \"zoom\": 0\n}\n</code></pre>"},{"location":"user_guide/endpoints/#viewer","title":"Viewer","text":"<p>Simple Map viewer. Not in OGC Tile API specification</p> <p>Path:</p> <ul> <li><code>/collections/{collectionId}/{tileMatrixSetId}/viewer</code></li> </ul> <p>PathParams:</p> <ul> <li>collectionId (str): Feature Collection Id</li> <li>tileMatrixSetId (str): TileMatrixSet identifier</li> </ul> <p>QueryParams:</p> <ul> <li>minzoom (int): Set TileJSON document minzoom (default is the setting default or TMS default)</li> <li>maxzoom (int): Set TileJSON document maxzoom (default is the setting default or TMS default)</li> <li>geom-column * (str): Select the geometry column to retrieve collection's bounds from.</li> </ul> <p>Important</p> <p>Additional query-parameters will be forwarded to the tiles endpoint.</p>"},{"location":"user_guide/factories/","title":"Endpoints Factories","text":"<p><code>tipg</code> creates endpoints using Endpoint Factories classes which abstract the definition of input dependency for all the endpoints.</p> <pre><code># pseudo code\nclass Factory:\n\n    collections_dependency: Callable\n    collection_dependency: Callable\n\n    def __init__(self, collections_dependency: Callable, collection_dependency: Callable):\n        self.collections_dependency = collections_dependency\n        self.collection_dependency = collection_dependency\n        self.router = APIRouter()\n\n        self.register_routes()\n\n    def register_routes(self):\n\n        @self.router.get(\"/collections\")\n        def collections(\n            request: Request,\n            collection_list=Depends(self.collections_dependency),\n        ):\n            ...\n\n        @self.router.get(\"/collections/{collectionId}\")\n        def collection(\n            request: Request,\n            collection=Depends(self.collection_dependency),\n        ):\n            ...\n\n        @self.router.get(\"/collections/{collectionId}/items\")\n        def items(\n            request: Request,\n            collection=Depends(self.collection_dependency),\n        ):\n            item_list = collection.features(...)\n            ...\n\n        @self.router.get(\"/collections/{collectionId}/items/{itemId}\")\n        def item(\n            request: Request,\n            collection=Depends(self.collection_dependency),\n            itemId: str = Path(..., description=\"Item identifier\"),\n        ):\n            item_list = collection.features(ids_filter=[itemId])\n            ...\n\n\n\n# Create FastAPI Application\napp = FastAPI()\n\n# Create a Factory instance\nendpoints = Factory(collection_dependency=lambda: [\"collection1\", \"collection2\"])\n\n# Register the factory router (with the registered endpoints) to the application\napp.include_router(endpoints.router)\n</code></pre>"},{"location":"user_guide/factories/#ogc-features-api-factory","title":"OGC Features API Factory","text":"<pre><code>from tipg.factory import OGCFeaturesFactory\n\napp = FastAPI()\nendpoints = OGCFeaturesFactory(with_common=True)\napp.include_router(endpoints.router)\n</code></pre>"},{"location":"user_guide/factories/#creation-options","title":"Creation Options","text":"<ul> <li> <p>collections_dependency (Callable[..., tipg.collections.CollectionList]): Callable which return a CollectionList dictionary</p> </li> <li> <p>collection_dependency (Callable[..., tipg.collections.Collection]): Callable which return a Collection instance</p> </li> <li> <p>with_common (bool, optional): Create Full OGC Features API set of endpoints with OGC Common endpoints (landing <code>/</code> and conformance <code>/conformance</code>). Defaults to <code>True</code></p> </li> <li> <p>router (fastapi.APIRouter, optional): FastAPI</p> </li> <li> <p>router_prefix (str, optional): prefix for the whole set of endpoints</p> </li> <li> <p>templates (starlette.templating.Jinja2Templates, optional): Templates to be used in endpoint's responses</p> </li> <li> <p>title (str, optional): Title of for the endpoints (only used if <code>with_common=True</code>)</p> </li> </ul>"},{"location":"user_guide/factories/#endpoints","title":"Endpoints","text":"Method Path Output Description <code>GET</code> <code>/collections</code> HTML / JSON list of available collections <code>GET</code> <code>/collections/{collectionId}</code> HTML / JSON collection's metadata <code>GET</code> <code>/collections/{collectionId}/queryables</code> HTML / SchemaJSON available queryable for a collection <code>GET</code> <code>/collections/{collectionId}/items</code> HTML / JSON / NDJSON / GeoJSON/ GeoJSONSeq / CSV a set of items for a collection <code>GET</code> <code>/collections/{collectionId}/items/{itemId}</code> HTML / JSON/GeoJSON one collection's item <code>GET</code> <code>/conformance</code> HTML / JSON conformance class landing Page <code>GET</code> <code>/</code> HTML / JSON landing page"},{"location":"user_guide/factories/#ogc-tiles-api-factory","title":"OGC Tiles API Factory","text":"<pre><code>from tipg.factory import OGCTilesFactory\n\napp = FastAPI()\nendpoints = OGCTilesFactory(with_common=True)\napp.include_router(endpoints.router)\n</code></pre>"},{"location":"user_guide/factories/#creation-options_1","title":"Creation Options","text":"<ul> <li> <p>collection_dependency (Callable[..., tipg.collections.Collection]): Callable which return a Collection instance</p> </li> <li> <p>supported_tms (morecantile.TileMatrixSets): morecantile TileMatrixSets instance (holds a set of TileMatrixSet documents)</p> </li> <li> <p>with_viewer (bool, optional): add <code>/viewer</code> endpoint to visualize the Vector tile. Defaults to <code>True</code></p> </li> <li> <p>with_common (bool, optional): Create Full OGC Features API set of endpoints with OGC Common endpoints (landing <code>/</code> and conformance <code>/conformance</code>). Defaults to <code>True</code></p> </li> <li> <p>router (fastapi.APIRouter, optional): FastAPI</p> </li> <li> <p>router_prefix (str, optional): prefix for the whole set of endpoints</p> </li> <li> <p>templates (starlette.templating.Jinja2Templates, optional): Templates to be used in endpoint's responses</p> </li> <li> <p>title (str, optional): Title of for the endpoints (only used if <code>with_common=True</code>)</p> </li> </ul>"},{"location":"user_guide/factories/#endpoints_1","title":"Endpoints","text":"Method Path Output Description <code>GET</code> <code>/collections/{collectionId}/tiles</code> JSON list of available vector tilesets <code>GET</code> <code>/collections/{collectionId}/tiles/{tileMatrixSetId}</code> JSON vector tileset metadata <code>GET</code> <code>/collections/{collectionId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}</code> Mapbox Vector Tile (Protobuf) create a web map vector tile from collection's items <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/tilejson.json</code> JSON Mapbox TileJSON document <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/style.json</code> JSON Mapbox/Maplibre StyleJSON document <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/viewer</code> HTML simple map viewer [OPTIONAL] <code>GET</code> <code>/tileMatrixSets</code> JSON list of available TileMatrixSets <code>GET</code> <code>/tileMatrixSets/{tileMatrixSetId}</code> JSON TileMatrixSet document <code>GET</code> <code>/conformance</code> HTML / JSON conformance class landing Page <code>GET</code> <code>/</code> HTML / JSON landing page"},{"location":"user_guide/factories/#ogc-features-tiles-api-factory","title":"OGC Features + Tiles API Factory","text":"<pre><code>from tipg.factory import Endpoints\n\napp = FastAPI()\nendpoints = Endpoints()\napp.include_router(endpoints.router)\n</code></pre>"},{"location":"user_guide/factories/#creation-options_2","title":"Creation Options","text":"<ul> <li> <p>collections_dependency (Callable[..., tipg.collections.CollectionList]): Callable which return a CollectionList dictionary</p> </li> <li> <p>collection_dependency (Callable[..., tipg.collections.Collection]): Callable which return a Collection instance</p> </li> <li> <p>supported_tms (morecantile.TileMatrixSets): morecantile TileMatrixSets instance (holds a set of TileMatrixSet documents)</p> </li> <li> <p>with_tiles_viewer (bool, optional): add <code>/viewer</code> endpoint to visualize the Vector tile. Defaults to <code>True</code></p> </li> <li> <p>with_common (bool, optional): Create Full OGC Features API set of endpoints with OGC Common endpoints (landing <code>/</code> and conformance <code>/conformance</code>). Defaults to <code>True</code></p> </li> <li> <p>router (fastapi.APIRouter, optional): FastAPI</p> </li> <li> <p>router_prefix (str, optional): prefix for the whole set of endpoints</p> </li> <li> <p>templates (starlette.templating.Jinja2Templates, optional): Templates to be used in endpoint's responses</p> </li> <li> <p>title (str, optional): Title of for the endpoints (only used if <code>with_common=True</code>)</p> </li> </ul>"},{"location":"user_guide/factories/#endpoints_2","title":"Endpoints","text":"Method Path Output Description <code>GET</code> <code>/collections</code> HTML / JSON list of available collections <code>GET</code> <code>/collections/{collectionId}</code> HTML / JSON collection's metadata <code>GET</code> <code>/collections/{collectionId}/queryables</code> HTML / SchemaJSON available queryable for a collection <code>GET</code> <code>/collections/{collectionId}/items</code> HTML / JSON / NDJSON / GeoJSON/ GeoJSONSeq / CSV a set of items for a collection <code>GET</code> <code>/collections/{collectionId}/items/{itemId}</code> HTML / JSON/GeoJSON one collection's item <code>GET</code> <code>/collections/{collectionId}/tiles</code> JSON list of available vector tilesets <code>GET</code> <code>/collections/{collectionId}/tiles/{tileMatrixSetId}</code> JSON vector tileset metadata <code>GET</code> <code>/collections/{collectionId}/tiles/{tileMatrixSetId}/{z}/{x}/{y}</code> Mapbox Vector Tile (Protobuf) create a web map vector tile from collection's items <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/tilejson.json</code> JSON Mapbox TileJSON document <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/style.json</code> JSON Mapbox/Maplibre StyleJSON document <code>GET</code> <code>/collections/{collectionId}/{tileMatrixSetId}/viewer</code> HTML simple map viewer [OPTIONAL] <code>GET</code> <code>/tileMatrixSets</code> JSON list of available TileMatrixSets <code>GET</code> <code>/tileMatrixSets/{tileMatrixSetId}</code> JSON TileMatrixSet document <code>GET</code> <code>/conformance</code> HTML / JSON conformance class landing Page <code>GET</code> <code>/</code> HTML / JSON landing page"}]}